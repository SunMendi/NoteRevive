package llm

import (
    "context"
    "fmt"
    "os"
    "strings"
    "log"
    "regexp" // Import the regexp package

    "github.com/google/generative-ai-go/genai"
    "google.golang.org/api/option"
)

type LLMService struct {
    client *genai.Client
}

func NewLLMService() (*LLMService, error) {
    ctx := context.Background()

    client, err := genai.NewClient(ctx, option.WithAPIKey(os.Getenv("GEMINI_API_KEY")))
    if err != nil {
        return nil, fmt.Errorf("failed to create Gemini client: %w", err)
    }
    return &LLMService{client: client}, nil
}

func (s *LLMService) Close() {
    s.client.Close()
}

// Function to remove HTML tags from a string
func removeHTMLTags(input string) string {
    re := regexp.MustCompile(`<[^>]*>`) // Regular expression to match HTML tags
    return re.ReplaceAllString(input, "") // Replace HTML tags with an empty string
}

// Function to create a structured prompt
func (s *LLMService) makePrompt(notes string) string {
    return fmt.Sprintf(`Create a concise and objective summary of the following notes.
Focus only on the key points, ideas, and information actually present like by seeing this he can remember his note and also read some of his note.
Do not add structure, headings, or commentary.
Do not use markdown, bullet points, or emojis.
Keep it to 1â€“3 short paragraphs, under 300 words.
Write in clear, plain English.

Notes:
%s

Now write the summary:
`, notes)
}

func (s *LLMService) GenerateNoteSummary(content string) (string, error) {
    if len(content) < 1 {
        return "no note today", nil
    }

    // Remove HTML tags from the content
    cleanContent := removeHTMLTags(content)

    ctx := context.Background()
    
    // Create a structured prompt using the makePrompt function
    prompt := s.makePrompt(cleanContent)

    model := s.client.GenerativeModel("gemini-2.0-flash") // Ensure this model is available

    resp, err := model.GenerateContent(ctx, genai.Text(prompt))
    if err != nil {
        log.Println("model issue")
        return "", fmt.Errorf("failed to generate summary: %w", err)
    }

    if len(resp.Candidates) == 0 || resp.Candidates[0].Content == nil ||
        len(resp.Candidates[0].Content.Parts) == 0 {
        log.Println("model issue")
        return "", fmt.Errorf("no valid content generated by AI")
    }

    summary := fmt.Sprintf("%v", resp.Candidates[0].Content.Parts[0])
    return strings.TrimSpace(summary), nil
}