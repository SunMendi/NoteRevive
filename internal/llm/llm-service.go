package llm

import (
	"context"
	"fmt"
	"os"
	"strings"

	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

type LLMService struct {
	client *genai.Client
}

func NewLLMService() (*LLMService, error) {
	ctx := context.Background()

	client, err := genai.NewClient(ctx, option.WithAPIKey(os.Getenv("GEMINI_API_KEY")))
	if err != nil {
		return nil, fmt.Errorf("failed to create Gemini client: %w", err)
	}
	return &LLMService{client: client}, nil
}

func (s *LLMService) Close() {
	s.client.Close()
}

func (s *LLMService) GenerateNoteSummary(content string) (string, error) {
	if len(content) < 1 {
		return "no note today", nil
	}

	ctx := context.Background()
	model := s.client.GenerativeModel("models/gemini-1.5-flash-latest")

	resp, err := model.GenerateContent(ctx, genai.Text(content))
	if err != nil {
		return "", fmt.Errorf("failed to generate summary: %w", err)
	}

	if len(resp.Candidates) == 0 || resp.Candidates[0].Content == nil ||
		len(resp.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no valid content generated by AI")
	}

	summary := fmt.Sprintf("%v", resp.Candidates[0].Content.Parts[0])
	return strings.TrimSpace(summary), nil
}

// func (s *LLMService) makePrompt(notes string) string {
//     return fmt.Sprintf(`Create a concise and objective summary of the following notes from the user's day.
// Focus only on the key points, ideas, and information actually present.
// Do not add structure, headings, or commentary.
// Do not use markdown, bullet points, or emojis.
// Keep it to 1â€“3 short paragraphs, under 300 words.
// Write in clear, plain English."

// Notes:
// %s

// Now write the summary:
// `, notes)
// }
